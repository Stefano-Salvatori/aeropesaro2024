"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/R6W3vqQ1jnX
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Chivo } from 'next/font/google'
import { Taviraj } from 'next/font/google'

chivo({
  subsets: ['latin'],
  display: 'swap',
})

taviraj({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Spinner } from "./spinner";

const sanitize = (s: string) => {
  let sanitized = s.replace(/[^a-z0-9]/gi, "_");
  sanitized = sanitized.replace(/_+/g, "_");
  sanitized = sanitized.replace(/^_|_$/g, "");
  return sanitized;
};

export function Landing() {
  const [name, setName] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  const runGenerate = async () => {
    setIsGenerating(true);
    const res = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name }),
    });

    if (res.ok) {
      const data = await res.json();
      const pdf = Buffer.from(data.pdf, "base64");

      const pdfBase64 = data.pdf;

      const pdfBytes = Uint8Array.from(atob(pdfBase64), (c) => c.charCodeAt(0));
      const blob = new Blob([pdfBytes], { type: "application/pdf" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `certificate-${sanitize(name)}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    setIsGenerating(false);
  };

  return (
    <section className="w-full py-12 md:py-24 lg:py-32 xl:py-40">
      <div className="container flex flex-col items-center gap-4 px-4 space-y-4 md:gap-8 md:px-6 mx-auto">
        <div className="flex flex-col items-center space-y-4 text-center">
          <h1 className="text-xl font-bold tracking-tighter sm:text-4xl">
            Artistic Gymnastics European Championships
          </h1>
          <h2 className="text-xl font-bold tracking-tighter sm:text-2xl">Rimini 2024</h2>
          <p className="max-w-[600px] text-gray-500 md:text-xl/relaxed dark:text-gray-400 pt-5">
            Enter your name and surname to receive the certificate
          </p>
        </div>
        <div className="flex flex-col items-center space-y-2">
          <div className="flex flex-col gap-2 md:flex-row md:gap-4 lg:gap-0">
            <Input
              className="max-w-xl"
              placeholder="Name and surname"
              type="text"
              value={name}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}
            />
            <Button
              className="w-full md:w-auto ml-2"
              onClick={() => runGenerate()}
              disabled={isGenerating || !name}
            >
              <div className="min-w-32 flex justify-center items-center">{isGenerating ? <Spinner /> : "Get certificate"}</div>
            </Button>
          </div>
        </div>
      </div>
    </section>
  );
}
